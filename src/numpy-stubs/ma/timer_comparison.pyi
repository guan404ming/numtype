from _typeshed import Incomplete

import numpy as np

__all__: list[str] = []

pi: float = ...

class ModuleTester:
    module: Incomplete = ...
    allequal: Incomplete = ...
    arange: Incomplete = ...
    array: Incomplete = ...
    concatenate: Incomplete = ...
    count: Incomplete = ...
    equal: Incomplete = ...
    filled: Incomplete = ...
    getmask: Incomplete = ...
    getmaskarray: Incomplete = ...
    id: Incomplete = ...
    inner: Incomplete = ...
    make_mask: Incomplete = ...
    masked: Incomplete = ...
    masked_array: Incomplete = ...
    masked_values: Incomplete = ...
    mask_or: Incomplete = ...
    nomask: Incomplete = ...
    ones: Incomplete = ...
    outer: Incomplete = ...
    repeat: Incomplete = ...
    resize: Incomplete = ...
    sort: Incomplete = ...
    take: Incomplete = ...
    transpose: Incomplete = ...
    zeros: Incomplete = ...
    MaskType: Incomplete = ...
    umath: Incomplete = ...
    testnames: list[str] = ...

    def __init__(self, module: Incomplete) -> None: ...
    def assert_array_compare(
        self,
        comparison: Incomplete,
        x: Incomplete,
        y: Incomplete,
        err_msg: str = ...,
        header: str = ...,
        fill_value: bool = ...,
    ) -> None: ...
    def assert_array_equal(
        self,
        x: Incomplete,
        y: Incomplete,
        err_msg: str = ...,
    ) -> None: ...

    #
    @np.errstate(all="ignore")
    def test_0(self) -> None: ...
    @np.errstate(all="ignore")
    def test_1(self) -> None: ...
    @np.errstate(all="ignore")
    def test_2(self) -> None: ...
    @np.errstate(all="ignore")
    def test_3(self) -> None: ...
    @np.errstate(all="ignore")
    def test_4(self) -> None: ...
    @np.errstate(all="ignore")
    def test_5(self) -> None: ...
    @np.errstate(all="ignore")
    def test_6(self) -> None: ...
    @np.errstate(all="ignore")
    def test_7(self) -> None: ...
    @np.errstate(all="ignore")
    def test_99(self) -> None: ...
    @np.errstate(all="ignore")
    def test_A(self) -> None: ...
